package org.narph.hstt.dao;

import org.springframework.dao.DataAccessException;

import java.io.Serializable;
import java.util.List;

/**
 * Created by IntelliJ IDEA.
 * User: ende
 * Date: 05.04.12
 * Time: 14:44
 */
public interface DAO<T extends Serializable> {

    /**
     * creates the given object in the DB. If id is autogenerated it gets assigned here.
     * @param _obj the Object to be persisted
     * @return 0 if nothing has been inserted but no error occoured, 1 on success
     * @throws DataAccessException
     */
    public int create(T _obj) throws DataAccessException;

    /**
     * updates the given (prepersisted) object in the DB.
     * @param _obj the Object to be updated
     * @return 0 if nothing has been updated but no error occoured, 1 on success
     * @throws DataAccessException
     */
    public int update(T _obj) throws DataAccessException;

    /**
     * deltes the given (prepersisted) object from the DB.
     * @param _obj the Object to be deleted
     * @return true on success, false if nothing was done (eg. the object was not found)
     * @throws DataAccessException
     */
    public boolean delete(T _obj) throws DataAccessException;

    /**
     * deltes the given (prepersisted) object from the DB, searching by id.
     * @param _id
     * @return
     * @throws DataAccessException
     */
    public boolean deleteById(String _id) throws DataAccessException;

    /**
     * search for an Object in the DB by a given identifier
     * @param _id the identifier of the item.
     * @return the Object found
     * @throws DataAccessException
     */
    public T getById(String _id) throws DataAccessException;

    /**
     * retrieve a list of all persisted Objects of the DAOs Type
     * @return List of all Objects
     * @throws DataAccessException
     */
    public List<T> getAll() throws DataAccessException;

}
